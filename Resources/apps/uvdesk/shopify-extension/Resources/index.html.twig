{% extends "WebkulDefaultBundle:Default:layout.html.twig" %}
{% block title %}
	{{ 'Apps'|trans }}
{% endblock %}

{% block body %}
	<!--Inner Section-->
	<div class="uv-inner-section">

		<!--Aside-->
		{{ include('WebkulAppBundle:Application:applicationDefaultSidebar.html.twig') }}
		<!--View-->
		<div class="uv-view {% if app.request.cookies and app.request.cookies.get('uv-asideView') %}uv-aside-view{% endif %}">
			<h1 id="app-current-title">{{ 'All Apps'|trans }}</h1>
			<div class="uv-action-bar">
                <div class="uv-action-col-wrapper">
					<div class="uv-action-col-wrapper uv-width-full">

						<div class="uv-action-bar-col-lt">
							<!-- Filter action -->
							<div class="filter">
								<!--Sort by-->
								<div class="uv-dropdown sort">
									<div class="uv-dropdown-btn uv-vertical-align uv-margin-right-5">
										{{ 'Sort By:'|trans }} {{ 'Date Released'|trans }}
									</div>
									<div class="uv-dropdown-list uv-bottom-left">
										<div class="uv-dropdown-container">
											<label>{{ 'Sort By'|trans }}</label>
											<ul>
											</ul>
										</div>
									</div>
								</div>
								<!--Sort by-->

							</div>
							<!-- //Filter action -->
						</div>

						<div class="uv-action-bar-col-rt">
							<!-- app search -->
							<input type="text" class="uv-search-inline uv-search-inline-300" placeholder="{{ 'Search'|trans }}">
							<!-- //app search -->
						</div>
					</div>
                </div>
            </div>

			<div class="uv-view-plank" id="application-list">
			</div>

			<div class="navigation"></div>
		</div>
		<!--//View-->
	</div>
	<!--//Inner Section-->

{% endblock %}
{% block footer %}
	{{ parent() }}

	<script id="application_list_sorting_tmp" type="text/template">
		<!-- Sorting Template -->
        <li class="<% if(sort == 'a.createdAt') { %>uv-drop-list-active<% } %>">
            <a href="#<% if(queryString != '') { %><%= queryString %>/<% } %><% if(page) { %>page/<%= page %><% } else { %>page/1<% } %>/sort/a.createdAt/<% if(sort == 'a.createdAt') { %><% if(direction) { %>direction/<%= direction %><% } else { %>direction/desc<% } %><% } else { %>direction/asc<% } %>" data-field="a.createdAt">
                {{ 'Date Released'|trans }}
                <% if(sort == 'a.createdAt') { %>
					<span class="uv-sorting <% if(direction == 'asc') { %> descend <% } else { %> ascend <% } %>"></span>
				<% } %>
            </a>
        </li>
        <li class="<% if(sort == 'a.name') { %>uv-drop-list-active<% } %>">
            <a href="#<% if(queryString != '') { %><%= queryString %>/<% } %><% if(page) { %>page/<%= page %><% } else { %>page/1<% } %>/sort/a.name/<% if(sort == 'a.name') { %><% if(direction) { %>direction/<%= direction %><% } else { %>direction/desc<% } %><% } else { %>direction/asc<% } %>" data-field="a.name">
                {{ 'Name'|trans }}
                <% if(sort == 'a.name') { %>
					<span class="uv-sorting <% if(direction == 'asc') { %> descend <% } else { %> ascend <% } %>"></span>
				<% } %>
            </a>
        </li>
        <li class="<% if(sort == 'a.type') { %>uv-drop-list-active<% } %>">
            <a href="#<% if(queryString != '') { %><%= queryString %>/<% } %><% if(page) { %>page/<%= page %><% } else { %>page/1<% } %>/sort/a.type/<% if(sort == 'a.type') { %><% if(direction) { %>direction/<%= direction %><% } else { %>direction/desc<% } %><% } else { %>direction/asc<% } %>" data-field="a.type">
                {{ 'Pricing'|trans }}
                <% if(sort == 'a.type') { %>
					<span class="uv-sorting <% if(direction == 'asc') { %> descend <% } else { %> ascend <% } %>"></span>
				<% } %>
            </a>
        </li>
		<!-- //Sorting Template -->
	</script>

	<script id="application_list_item_tmp" type="text/template">
	<!--App Card-->
		<% configurePath = "{{ path('app_load_application', {'applicationRouteName': 'replaceAppName' }) }}" %>
		<% configurePath = configurePath.replace('replaceAppName', name.toLowerCase().replace(new RegExp(' ', 'g'), '-')) %>
		<a href="<%= configurePath %>">
			<img src="<%= banner %>" alt="<%= name %>" style="min-height: 120px;" >
			<h4><%= name %></h4>
			<p><%= about %></p>
			<span class="uv-app-price"><%= type %></span>
			<div class="uv-action-buttons">
				<% if (dependencyName == 'UVDesk Helpdesk') { %>
						<a class="uv-btn-small" href="<%= configurePath %>">View</a>
				<% } else { %>
						<% if('undefined' != typeof(isInstalled) && isInstalled) { %>
							<a class="uv-btn-small" href="<%= configurePath %>">Configure</a>
						<% } else { %>
							<a class="uv-btn-small uv-btn-install" href="#">Install</a>
						<% } %>
				<% } %>
			</div>
		</a>
	<!--App Card-->
    </script>
	<script type="text/template" id="no-result-temp">
        <div class="uv-app-screen">
            <div class="uv-app-splash" style="text-align: center;">
                <img class="uv-app-splash-image" src="{{ asset('bundles/webkuldefault/images/task-splash.png') }}" alt="Tasks">
                <h2 class="uv-margin-top-10">{{ 'Nothing Interesting here !'|trans }}</h2>
                <p>{{ "No result found for given filters. %clear%."|trans({'%clear%': '<a href=#>' ~ 'Clear filters'|trans ~ '</a>'})|raw }}</p>
            </div>
        </div>
	</script>

	<script type="text/javascript">
		var path = "{{ path('ticket_type_edit', {'template': 'replaceId' }) }}";

		$(function () {
			var globalMessageResponse = "";

			var ApplicationModel = Backbone.Model.extend({
				idAttribute : "id",
			});

			var ApplicationCollection = AppCollection.extend({
				model : ApplicationModel,
				url : "{{ path('app_list_xhr') }}",
				filterParameters : {
					"category" : "",
					"type" : "",
					"installed": "",
				},
				parseRecords: function (resp, options) {
					return resp.applications;
				},
				syncData : function() {
					app.appView.showLoader();
					self = this;
					this.fetch({
						data : self.getValidParameters(),
						reset: true,
						success: function(model, response) {
							app.appView.hideLoader();
							var appListView = new ApplicationList();
							app.pager.paginationData = response.pagination_data;

							var url = app.pager.paginationData.url;
							if(applicationCollection.length == 0 && app.pager.paginationData.current != "0")
								router.navigate(url.replace('replacePage', app.pager.paginationData.last),{trigger: true});
							else {
								app.pager.render();
							}
							if(globalMessageResponse)
								app.appView.renderResponseAlert(globalMessageResponse);
							globalMessageResponse = null;
						},
						error: function (model, xhr, options) {
							if(url = xhr.getResponseHeader('Location'))
								window.location = url;
						}
					});
				}
			});

			var ApplicationItem = Backbone.View.extend({
				tagName : "div",
				className: 'uv-app-wrapper',
				template : _.template($("#application_list_item_tmp").html()),
				events : {
					'click .uv-btn-install' : "installApp",
				},
				render : function() {
					this.$el.html(this.template(this.model.toJSON()));
					return this;
				},
				installApp: function(e) {
					e.preventDefault();
					app.appView.showLoader();
					self = this;
					data = this.model.toJSON();
					this.model.save(data, {
						patch: true,
						url: "{{ path('app_install_xhr') }}",
						success : function(model, response) {
							$(e.target).html('{{ "Configure"|trans }}');
							$(e.target).removeClass('uv-btn-install');
							app.appView.hideLoader();
							app.appView.renderResponseAlert(response);

							if(url = response['url']) {
								window.location = url;
							}
						},
						error : function(model, xhr) {
							if(url = xhr.getResponseHeader('Location'))
								window.location = url;

							app.appView.hideLoader();
							if(xhr.responseJSON) {
								response = xhr.responseJSON;
								app.appView.renderResponseAlert(response);
							}
						}
					});
				},
			});

			var ApplicationList = Backbone.View.extend({
				el : $("#application-list"),
				initialize : function() {
					app.appView.hideLoader();
					this.render();
				},
				render : function () {
					this.$el.html('');
					if(applicationCollection.length) {
						_.each(applicationCollection.models, function (item) {
							this.renderType(item);
						}, this);
					} else {
						this.$el.append(_.template($('#no-result-temp').html()))
					}
				},
				renderType : function (item) {
					var applicationItem = new ApplicationItem({
						model: item
					});
					this.$el.append(applicationItem.render().el);
				},
			});

            var Filter = app.Filter.extend({
				defaultSortIndex: 'createdAt',
				sortText: "{{ 'Sort By:'|trans }} ",
				defaultSortText: "{{ 'Sort By:'|trans }} {{ 'Date Released'|trans }}",
				template : _.template($("#application_list_sorting_tmp").html()),
                events : {
                    'keyup .uv-search-inline' : 'search',
                    'change .asset-visibility input[type="checkbox"]': 'filterAssetsVisibility'
                },
                search : _.debounce(function(e) {
                    this.collection.reset();
                    this.collection.state.currentPage = null;
                    this.collection.filterParameters.search = Backbone.$(e.target).val();
                    var queryString = this.buildQuery($.param(this.collection.getValidParameters()));
                    router.navigate(queryString,{trigger: true});
                }, 1000),
				sortCollection : function(sortField,order) {
					var context = {};
					context['queryString'] = this.buildQuery($.param(this.collection.getValidParameters()));
					if(typeof sortField != 'undefined' && sortField != null) {
						context['page'] = this.collection.state.currentPage;
						context['sort'] = sortField;

						if(order == 'asc') {
							context['direction'] = 'desc';
							order = -1;
						} else {
							context['direction'] = 'asc';
							order = 1;
						}

						$(".sort .uv-dropdown-list ul").html(this.template(context));
						var selectedText = $(".sort a[data-field='"+sortField+"']").text();
						$(".sort .uv-dropdown-btn").text(this.sortText + selectedText);
						this.collection.setSorting(sortField, order, {full: true});
					} else {
						$(".sort .uv-dropdown-btn").text(this.defaultSortText);
						context['page'] = this.collection.state.currentPage;
						context['sort'] = this.defaultSortIndex;
						context['direction'] = 'asc';
						$(".sort .uv-dropdown-list ul").html(this.template(context));
					}
				},
				buildQuery: function(query) {
					query = query.replace(/&/g, '/');
					query = query.replace(/=/g, '/');
					if (query.indexOf("type/free") >= 0)
						query = query.replace('type/free', 'free')
					else if (query.indexOf("type/premium") >= 0)
						query = query.replace('type/premium', 'premium')
					else if (query.indexOf("installed/1") >= 0)
						query = query.replace('installed/1', 'installed')
					else if (query.indexOf("category/") >= 0)
						query = query.replace('category/', '');
					return query;
				},
			})

			Router = Backbone.Router.extend({
				routes: {
					'page/:number(/sort/:sortField)(/direction/:order)': 'paginate',
                    'search/:query(/page/:number)(/sort/:sortField)(/direction/:order)' : 'filterByQuery',
					'free(/search/:query)(/page/:number)(/sort/:sortField)(/direction/:order)': 'filterFreeApps',
					'premium(/search/:query)(/page/:number)(/sort/:sortField)(/direction/:order)': 'filterPremiumApps',
					'installed(/search/:query)(/page/:number)(/sort/:sortField)(/direction/:order)': 'filterInstalledApps',
					':category(/search/:query)(/:pricing)(/page/:number)(/sort/:sortField)(/direction/:order)' : 'filterByCategory',
					'': 'initializeList',
				},
				paginate : function(number, sortField, order) {
					this.resetParams('', '',  '', '', number, sortField, order, '{{ "All"|trans }}');
				},
				filterByQuery: function(query, number, sortField, order) {
					this.resetParams(query, '', '', '', number, sortField, order, '{{ "All"|trans }}');
				},
				filterByCategory: function(category, query, pricing, number, sortField, order) {
					if('free' != pricing && 'premium' != pricing) {
						pricing = '';
					}
					this.resetParams(query, category, pricing, '', number, sortField, order, category);
				},
				filterFreeApps: function(query, number, sortField, order) {
					this.resetParams(query, '', 'free', '', number, sortField, order, '{{ "Free"|trans }}');

				},
				filterPremiumApps: function(query, number, sortField, order) {
					this.resetParams(query, '', 'premium', '', number, sortField, order, '{{ "Premium"|trans }}');
				},
				filterInstalledApps: function(query, number, sortField, order) {
					this.resetParams(query, '', '', true, number, sortField, order, '{{ "Installed"|trans }}');
				},
				initializeList : function() {
					this.resetParams('', '','', '', null, null, null, 'All');
				},
				resetParams : function(query, category, pricing, installedFlag, number, sortField, order, titleText) {
					applicationCollection.filterParameters.category = category;
					applicationCollection.filterParameters.type = pricing;
					applicationCollection.filterParameters.installed = installedFlag ? 1 : null;
					applicationCollection.state.currentPage = number;

                    if(query != null) {
                        query = query.replace(/\+/g,' ');
					}
                    applicationCollection.filterParameters.search = query;
                    $(".uv-search-inline").val(query);

					filter.sortCollection(sortField, order);
					applicationCollection.syncData();

					titleFullText = '{{ "%type% Apps"|trans({"%type%": "replaceString", "Apps": "Apps"|trans }) }}';
					titleFullText = titleFullText.replace('replaceString', titleText).replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
					$('#app-current-title').html(titleFullText);
					$('.uv-aside-nav-active').removeClass('uv-aside-nav-active');
					$('.uv-aside li a[data-filter="'+titleText+'"]').addClass('uv-aside-nav-active');;
				},
			});

			var applicationCollection = new ApplicationCollection();

			var filter = new Filter({
                collection : applicationCollection
            });

			router = new Router();
			Backbone.history.start({push_state:true});
		});
	</script>
{% endblock %}
